{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/yo/Documentos/kaap/components/context/Teclado.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nvar TextContext = /*#__PURE__*/createContext({});\nexport function TextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(''),\n      typedText = _useState[0],\n      setTypedText = _useState[1];\n\n  var _useState2 = useState(false),\n      allCleaned = _useState2[0],\n      setAllCleaned = _useState2[1];\n\n  function changeText(value, add) {\n    var novoTexto = '';\n    console.log(add);\n\n    if (add) {\n      novoTexto = typedText + value.toUpperCase();\n    } else {\n      novoTexto = typedText.slice(0, -1);\n    }\n\n    setTypedText(novoTexto);\n  }\n\n  function clearAll() {\n    setTypedText('');\n    setAllCleaned(!allCleaned);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TextContext.Provider, {\n    value: {\n      typedText: typedText,\n      changeText: changeText,\n      clearAll: clearAll,\n      allCleaned: allCleaned\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TextProvider, \"Ja7L/cDlx8JG47P2iPA1NvmCamw=\");\n\n_c = TextProvider;\nexport default TextContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextProvider\");","map":{"version":3,"sources":["/home/yo/Documentos/kaap/components/context/Teclado.js"],"names":["createContext","useState","TextContext","TextProvider","children","typedText","setTypedText","allCleaned","setAllCleaned","changeText","value","add","novoTexto","console","log","toUpperCase","slice","clearAll"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AAEA,IAAMC,WAAW,gBAAGF,aAAa,CAAC,EAAD,CAAjC;AAEA,OAAO,SAASG,YAAT,OAAkC;AAAA;;AAAA,MAAXC,QAAW,QAAXA,QAAW;;AAAA,kBACHH,QAAQ,CAAC,EAAD,CADL;AAAA,MAC9BI,SAD8B;AAAA,MACnBC,YADmB;;AAAA,mBAEDL,QAAQ,CAAC,KAAD,CAFP;AAAA,MAE9BM,UAF8B;AAAA,MAElBC,aAFkB;;AAIrC,WAASC,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;AAC5B,QAAIC,SAAS,GAAG,EAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;;AACA,QAAIA,GAAJ,EAAS;AACLC,MAAAA,SAAS,GAAGP,SAAS,GAAGK,KAAK,CAACK,WAAN,EAAxB;AACH,KAFD,MAEO;AACHH,MAAAA,SAAS,GAAGP,SAAS,CAACW,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAZ;AACH;;AACDV,IAAAA,YAAY,CAACM,SAAD,CAAZ;AACH;;AAED,WAASK,QAAT,GAAoB;AAChBX,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAE,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACH;;AAED,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACzBF,MAAAA,SAAS,EAATA,SADyB;AAEzBI,MAAAA,UAAU,EAAVA,UAFyB;AAGzBQ,MAAAA,QAAQ,EAARA,QAHyB;AAIzBV,MAAAA,UAAU,EAAVA;AAJyB,KAA7B;AAAA,cAOKH;AAPL;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GA/BeD,Y;;KAAAA,Y;AAiChB,eAAeD,WAAf","sourcesContent":["import { createContext, useState } from 'react';\n\nconst TextContext = createContext({});\n\nexport function TextProvider({children}) {\n    const [typedText, setTypedText] = useState('')\n    const [allCleaned, setAllCleaned] = useState(false)\n\n    function changeText(value, add) {\n        let novoTexto = ''\n        console.log(add)\n        if (add) {\n            novoTexto = typedText + value.toUpperCase()\n        } else {\n            novoTexto = typedText.slice(0, -1)\n        }\n        setTypedText(novoTexto)\n    }\n\n    function clearAll() {\n        setTypedText('')\n        setAllCleaned(!allCleaned)\n    }\n\n    return (\n        <TextContext.Provider value={{\n            typedText,\n            changeText,\n            clearAll,\n            allCleaned,\n        }}\n        >\n            {children}\n        </TextContext.Provider>\n    )\n}\n\nexport default TextContext;"]},"metadata":{},"sourceType":"module"}