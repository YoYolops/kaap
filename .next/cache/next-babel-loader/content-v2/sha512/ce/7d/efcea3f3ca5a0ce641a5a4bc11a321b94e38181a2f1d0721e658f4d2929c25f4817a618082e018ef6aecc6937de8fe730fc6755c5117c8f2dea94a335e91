{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/yo/Documentos/kaap/components/context/Teclado.js\";\nimport { createContext, useState } from 'react';\nconst TextContext = /*#__PURE__*/createContext({});\nexport function TextProvider({\n  children\n}) {\n  const {\n    0: typedText,\n    1: setTypedText\n  } = useState('');\n  const {\n    0: allCleaned,\n    1: setAllCleaned\n  } = useState(false);\n\n  function changeText(value, add) {\n    let novoTexto = '';\n    console.log(add);\n\n    if (add) {\n      console.log('if');\n      novoTexto = typedText + value.toUpperCase();\n    } else {\n      console.log('else');\n      console.log(`igualdade: ${typedText.slice(0, -1)[0]}`);\n      novoTexto = typedText.slice(0, -1);\n    }\n\n    console.log(novoTexto);\n    setTypedText(novoTexto);\n  }\n\n  function clearAll() {\n    setTypedText('');\n    setAllCleaned(!allCleaned);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TextContext.Provider, {\n    value: {\n      typedText,\n      changeText,\n      clearAll,\n      allCleaned\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\nexport default TextContext;","map":{"version":3,"sources":["/home/yo/Documentos/kaap/components/context/Teclado.js"],"names":["createContext","useState","TextContext","TextProvider","children","typedText","setTypedText","allCleaned","setAllCleaned","changeText","value","add","novoTexto","console","log","toUpperCase","slice","clearAll"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AAEA,MAAMC,WAAW,gBAAGF,aAAa,CAAC,EAAD,CAAjC;AAEA,OAAO,SAASG,YAAT,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAAkC;AACrC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BL,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACM,UAAD;AAAA,OAAaC;AAAb,MAA8BP,QAAQ,CAAC,KAAD,CAA5C;;AAEA,WAASQ,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;AAC5B,QAAIC,SAAS,GAAG,EAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;;AACA,QAAIA,GAAJ,EAAS;AACLE,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAF,MAAAA,SAAS,GAAGP,SAAS,GAAGK,KAAK,CAACK,WAAN,EAAxB;AACH,KAHD,MAGO;AACHF,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAa,cAAaT,SAAS,CAACW,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,EAAuB,CAAvB,CAA0B,EAApD;AACAJ,MAAAA,SAAS,GAAGP,SAAS,CAACW,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAZ;AACH;;AACDH,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAN,IAAAA,YAAY,CAACM,SAAD,CAAZ;AACH;;AAED,WAASK,QAAT,GAAoB;AAChBX,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAE,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACH;;AAED,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACzBF,MAAAA,SADyB;AAEzBI,MAAAA,UAFyB;AAGzBQ,MAAAA,QAHyB;AAIzBV,MAAAA;AAJyB,KAA7B;AAAA,cAOKH;AAPL;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;AAED,eAAeF,WAAf","sourcesContent":["import { createContext, useState } from 'react';\n\nconst TextContext = createContext({});\n\nexport function TextProvider({children}) {\n    const [typedText, setTypedText] = useState('')\n    const [allCleaned, setAllCleaned] = useState(false)\n\n    function changeText(value, add) {\n        let novoTexto = ''\n        console.log(add)\n        if (add) {\n            console.log('if')\n            novoTexto = typedText + value.toUpperCase()\n        } else {\n            console.log('else')\n            console.log(`igualdade: ${typedText.slice(0, -1)[0]}`)\n            novoTexto = typedText.slice(0, -1)\n        }\n        console.log(novoTexto)\n        setTypedText(novoTexto)\n    }\n\n    function clearAll() {\n        setTypedText('')\n        setAllCleaned(!allCleaned)\n    }\n\n    return (\n        <TextContext.Provider value={{\n            typedText,\n            changeText,\n            clearAll,\n            allCleaned,\n        }}\n        >\n            {children}\n        </TextContext.Provider>\n    )\n}\n\nexport default TextContext;"]},"metadata":{},"sourceType":"module"}