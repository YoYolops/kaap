{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/yo/Documentos/kaap/components/context/Teclado.js\";\nimport { createContext, useState } from 'react';\nconst TextContext = /*#__PURE__*/createContext({});\nexport function TextProvider({\n  children\n}) {\n  const {\n    0: typedText,\n    1: setTypedText\n  } = useState('');\n  const {\n    0: allCleaned,\n    1: setAllCleaned\n  } = useState(false);\n\n  function changeText(value) {\n    const novoTexto = typedText + value.toUpperCase();\n    setTypedText(novoTexto);\n  }\n\n  function clearAll() {\n    setTypedText('');\n    setAllCleaned(!allCleaned);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TextContext.Provider, {\n    value: {\n      typedText,\n      changeText,\n      clearAll\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\nexport default TextContext;","map":{"version":3,"sources":["/home/yo/Documentos/kaap/components/context/Teclado.js"],"names":["createContext","useState","TextContext","TextProvider","children","typedText","setTypedText","allCleaned","setAllCleaned","changeText","value","novoTexto","toUpperCase","clearAll"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AAEA,MAAMC,WAAW,gBAAGF,aAAa,CAAC,EAAD,CAAjC;AAEA,OAAO,SAASG,YAAT,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAAkC;AACrC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BL,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACM,UAAD;AAAA,OAAaC;AAAb,MAA8BP,QAAQ,CAAC,KAAD,CAA5C;;AAEA,WAASQ,UAAT,CAAoBC,KAApB,EAA2B;AACvB,UAAMC,SAAS,GAAGN,SAAS,GAAGK,KAAK,CAACE,WAAN,EAA9B;AACAN,IAAAA,YAAY,CAACK,SAAD,CAAZ;AACH;;AAED,WAASE,QAAT,GAAoB;AAChBP,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAE,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACH;;AAED,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACzBF,MAAAA,SADyB;AAEzBI,MAAAA,UAFyB;AAGzBI,MAAAA;AAHyB,KAA7B;AAAA,cAMKT;AANL;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;AAED,eAAeF,WAAf","sourcesContent":["import { createContext, useState } from 'react';\n\nconst TextContext = createContext({});\n\nexport function TextProvider({children}) {\n    const [typedText, setTypedText] = useState('')\n    const [allCleaned, setAllCleaned] = useState(false)\n\n    function changeText(value) {\n        const novoTexto = typedText + value.toUpperCase()\n        setTypedText(novoTexto)\n    }\n\n    function clearAll() {\n        setTypedText('')\n        setAllCleaned(!allCleaned)\n    }\n\n    return (\n        <TextContext.Provider value={{\n            typedText,\n            changeText,\n            clearAll,\n        }}\n        >\n            {children}\n        </TextContext.Provider>\n    )\n}\n\nexport default TextContext;"]},"metadata":{},"sourceType":"module"}